--- /dev/null	2020-06-09 09:57:24.381799695 +0200
+++ b/Makefile.linux-nocmake	2020-06-09 16:11:08.001489615 +0200
@@ -0,0 +1,19 @@
+CXXFLAGS = -O3 -Wall -fPIC -pedantic -Iinclude
+LDFLAGS = 
+
+EXEC = libserial.so
+OBJECTFILES = src/serial.o \
+	      src/impl/unix.o src/impl/list_ports/list_ports_linux.o
+
+CLEANFILES = $(OBJECTFILES) $(EXEC)
+
+all: $(EXEC)
+
+$(EXEC): $(OBJECTFILES)
+	$(CXX) $(CXXFLAGS) -shared $^ -o $@
+
+%.o: %.cc
+	$(CXX) $(CXXFLAGS) -c -o $@ $^ $(CCFLAGS)
+
+clean:
+	rm -f $(CLEANFILES)
--- a/include/serial/serial.h	2020-06-09 15:56:50.821501468 +0200
+++ b/include/serial/serial.h	2020-06-09 16:06:56.085493098 +0200
@@ -44,6 +44,7 @@
 #include <exception>
 #include <stdexcept>
 #include <serial/v8stdint.h>
+#include "serial/serial_api.h"
 
 #define THROW(exceptionClass, message) throw exceptionClass(__FILE__, \
 __LINE__, (message) )
@@ -53,7 +54,7 @@
 /*!
  * Enumeration defines the possible bytesizes for the serial port.
  */
-typedef enum {
+typedef LIBSERIAL_API enum {
   fivebits = 5,
   sixbits = 6,
   sevenbits = 7,
@@ -63,7 +64,7 @@
 /*!
  * Enumeration defines the possible parity types for the serial port.
  */
-typedef enum {
+typedef LIBSERIAL_API enum {
   parity_none = 0,
   parity_odd = 1,
   parity_even = 2,
@@ -74,7 +75,7 @@
 /*!
  * Enumeration defines the possible stopbit types for the serial port.
  */
-typedef enum {
+typedef LIBSERIAL_API enum {
   stopbits_one = 1,
   stopbits_two = 2,
   stopbits_one_point_five
@@ -83,7 +84,7 @@
 /*!
  * Enumeration defines the possible flowcontrol types for the serial port.
  */
-typedef enum {
+typedef LIBSERIAL_API enum {
   flowcontrol_none = 0,
   flowcontrol_software,
   flowcontrol_hardware
@@ -99,7 +100,7 @@
 #ifdef max
 # undef max
 #endif
-  static uint32_t max() {return std::numeric_limits<uint32_t>::max();}
+  static LIBSERIAL_API uint32_t max() {return std::numeric_limits<uint32_t>::max();}
   /*!
    * Convenience function to generate Timeout structs using a
    * single absolute timeout.
@@ -109,7 +110,7 @@
    *
    * \return Timeout struct that represents this simple timeout provided.
    */
-  static Timeout simpleTimeout(uint32_t timeout) {
+  static LIBSERIAL_API Timeout simpleTimeout(uint32_t timeout) {
     return Timeout(max(), timeout, 0, timeout, 0);
   }
 
@@ -128,7 +129,7 @@
    */
   uint32_t write_timeout_multiplier;
 
-  explicit Timeout (uint32_t inter_byte_timeout_=0,
+  explicit LIBSERIAL_API Timeout (uint32_t inter_byte_timeout_=0,
                     uint32_t read_timeout_constant_=0,
                     uint32_t read_timeout_multiplier_=0,
                     uint32_t write_timeout_constant_=0,
@@ -144,7 +145,7 @@
 /*!
  * Class that provides a portable serial port interface.
  */
-class Serial {
+class LIBSERIAL_API Serial {
 public:
   /*!
    * Creates a Serial object and opens the port if a port is specified,
@@ -669,7 +670,7 @@
 
 };
 
-class SerialException : public std::exception
+class LIBSERIAL_API SerialException : public std::exception
 {
   // Disable copy constructors
   SerialException& operator=(const SerialException&);
@@ -687,7 +688,7 @@
   }
 };
 
-class IOException : public std::exception
+class LIBSERIAL_API IOException : public std::exception
 {
   // Disable copy constructors
   IOException& operator=(const IOException&);
@@ -726,7 +727,7 @@
   }
 };
 
-class PortNotOpenedException : public std::exception
+class LIBSERIAL_API PortNotOpenedException : public std::exception
 {
   // Disable copy constructors
   const PortNotOpenedException& operator=(PortNotOpenedException);
@@ -768,7 +769,7 @@
  * \return vector of serial::PortInfo.
  */
 std::vector<PortInfo>
-list_ports();
+LIBSERIAL_API list_ports();
 
 } // namespace serial
 
--- /dev/null	2020-06-09 09:57:24.381799695 +0200
+++ b/include/serial/serial_api.h	2020-06-09 16:09:43.897490778 +0200
@@ -0,0 +1,37 @@
+/**
+* \file serial_api.h
+* \brief Preprocessor defines (class prefixes) to compile DLLs under Windows
+*
+* This header must be included to properly define LIBSERIAL_API in the remaining API headers
+*/
+
+#ifndef _SERIALAPI_H_
+#define _SERIALAPI_H_
+
+#if !defined(LIBSERIAL_STATICLIB)
+#if defined(BUILDING_LIBSERIAL)
+#if (defined(__MINGW32__) || defined(__MINGW64__))
+#define LIBSERIAL_API
+#elif (defined(WIN32) || defined(_WIN32))
+#define LIBSERIAL_API  __declspec(dllexport)
+#else
+#define LIBSERIAL_API
+#endif
+
+#define LIBSERIAL_LIB_EXPORT
+#undef LIBSERIAL_LIB_IMPORT
+#else
+#if (defined(__MINGW32__) || defined(__MINGW64__))
+#define LIBSERIAL_API
+#elif (defined(WIN32) || defined(_WIN32))
+#define LIBSERIAL_API  __declspec(dllimport)
+#else
+#define LIBSERIAL_API
+#endif
+
+#define LIBSERIAL_LIB_IMPORT
+#undef LIBSERIAL_LIB_EXPORT
+#endif
+#endif
+
+#endif	// _SERIALAPI_H_
